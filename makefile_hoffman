.PHONY: setup_salmon quantify_salmon clean_salmon help create_base_dirs create_project_dirs

# Makefile for RNA-Seq analysis pipeline using Salmon
# Default number of threads to use
THREADS ?= 4
# Default to paired-end reads unless specified otherwise
ENDTYPE ?= paired
# Default batch size for processing
BATCH_SIZE ?= 6
# Default project name
PROJECT ?= $(shell date +%Y%m%d)

# Directories
SALMON_DIR := salmon_processing
REF_DIR := $(SALMON_DIR)/salmon_ref
FINISHED_DIR := finished_projects
ACCESSIONS_DIR := accession_lists
# Use scratch space for processing
SCRATCH_DIR := /u/scratch/j/jrpopoli

# Reference files
TRANSCRIPTS := $(REF_DIR)/human_transcripts.fa.gz
GENOME := $(REF_DIR)/human_genome.fa.gz
GENTROME := $(REF_DIR)/human_gentrome.fa.gz
DECOYS := $(REF_DIR)/decoys.txt
SALMON_INDEX := $(REF_DIR)/salmon_index
GTF := $(REF_DIR)/mappings.gtf

# Group directory creation
create_base_dirs: $(SALMON_DIR) $(REF_DIR) $(FINISHED_DIR) $(ACCESSIONS_DIR)

create_project_dirs: $(PROJECT_DIR) $(SRA_DIR) $(SRA_DIR_TEMP) $(COUNTS_DIR)

# Setup directories and reference files
setup_salmon: create_base_dirs $(SALMON_INDEX) $(GTF)
	@echo "Setup complete. Directory structure created and reference files downloaded."

# Create directories
$(SALMON_DIR):
	mkdir -p $@

$(REF_DIR): | $(SALMON_DIR)
	mkdir -p $@

$(FINISHED_DIR):
	mkdir -p $@

$(ACCESSIONS_DIR):
	mkdir -p $@

# Download and prepare reference files
$(TRANSCRIPTS): | $(REF_DIR)
	curl https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_46/gencode.v46.transcripts.fa.gz -o $@

$(GENOME): | $(REF_DIR)
	curl https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_46/GRCh38.p14.genome.fa.gz -o $@

$(GTF).gz: | $(REF_DIR)
	curl https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_46/gencode.v46.annotation.gtf.gz -o $@

$(GTF): $(GTF).gz
	gzip -d $<

$(DECOYS): $(GENOME) | $(REF_DIR)
	gunzip -c $(GENOME) | grep "^>" | cut -d " " -f 1 | sed 's/>//g' > $@

$(GENTROME): $(TRANSCRIPTS) $(GENOME) | $(REF_DIR)
	cat $(TRANSCRIPTS) $(GENOME) > $@

$(SALMON_INDEX): $(GENTROME) $(DECOYS)
	salmon index -t $(GENTROME) -d $(DECOYS) --gencode -p $(THREADS) -i $@

# Quantification rules
quantify_salmon: create_project_dirs $(FINISHED_DIR)/all_counts_$(PROJECT).txt

# Make a project directory - now using scratch space
PROJECT_DIR := $(SCRATCH_DIR)/$(PROJECT)
SRA_DIR := $(PROJECT_DIR)/sra_out
SRA_DIR_TEMP := $(SRA_DIR)/temp
COUNTS_DIR := $(PROJECT_DIR)/salmon_gene_counts

$(PROJECT_DIR):
	mkdir -p $@

$(SRA_DIR): | $(PROJECT_DIR)
	mkdir -p $@

$(SRA_DIR_TEMP): | $(SRA_DIR)
	mkdir -p $@

$(COUNTS_DIR): | $(PROJECT_DIR)
	mkdir -p $@

# Copy and rename accession_list_PROJECT.txt into scratch sra_out as accession_list.txt
$(SRA_DIR)/accession_list.txt: $(ACCESSIONS_DIR)/accession_list_$(PROJECT).txt | $(SRA_DIR) $(ACCESSIONS_DIR)
	@echo "Copying and renaming accession list file..."
	cp $< $@

# Process SRA accessions and run Salmon quantification
$(FINISHED_DIR)/all_counts_$(PROJECT).txt: $(SRA_DIR)/accession_list.txt | $(COUNTS_DIR) $(FINISHED_DIR) $(SRA_DIR_TEMP)
	@echo "Processing GSM-SRR mapped accessions in batches of $(BATCH_SIZE)..."
	@echo "Using scratch directory: $(SCRATCH_DIR)"
	@# Create temporary directories
	@mkdir -p $(SRA_DIR)/fastq_temp
	@mkdir -p $(SRA_DIR)/mapping
	@# Calculate total number of GSM samples and batches
	@total_lines=$$(wc -l < $(SRA_DIR)/accession_list.txt); \
	batch_count=$$(( (total_lines + $(BATCH_SIZE) - 1) / $(BATCH_SIZE) )); \
	for batch_num in $$(seq 1 $$batch_count); do \
		start_line=$$(( (batch_num - 1) * $(BATCH_SIZE) + 1 )); \
		end_line=$$(( batch_num * $(BATCH_SIZE) )); \
		if [ $$end_line -gt $$total_lines ]; then \
			end_line=$$total_lines; \
		fi; \
		echo "Processing batch $$batch_num of $$batch_count (GSMs $$start_line to $$end_line)"; \
		# Extract current batch of GSM-SRR mappings \
		sed -n "$$start_line,$$end_line p" $(SRA_DIR)/accession_list.txt > $(SRA_DIR)/batch_$${batch_num}.txt; \
		# Create list of all SRRs in this batch \
		rm -f $(SRA_DIR)/mapping/batch_$${batch_num}_srrs.txt; \
		cat $(SRA_DIR)/batch_$${batch_num}.txt | cut -d '|' -f 2 | tr ' ' '\n' | grep -v '^$$' > $(SRA_DIR)/mapping/batch_$${batch_num}_srrs.txt; \
		# Count SRRs in current batch and adjust thread allocation dynamically \
		srr_count=$$(wc -l < $(SRA_DIR)/mapping/batch_$${batch_num}_srrs.txt); \
		echo "Downloading $${srr_count} SRR files for batch $${batch_num}..."; \
		# Calculate threads per process, with minimum of 1 \
		threads_per_process=$$(( $(THREADS) / $${srr_count} )); \
		if [ $${threads_per_process} -lt 1 ]; then \
		    threads_per_process=1; \
		fi; \
		echo "Allocating $${threads_per_process} threads per download process"; \
		# Download all SRRs in parallel \
		while read -r srr; do \
		    echo "Starting download of $${srr}..."; \
		    if [ "$(ENDTYPE)" = "single" ]; then \
		        fasterq-dump $${srr} --threads $${threads_per_process} -O $(SRA_DIR)/fastq_temp -t $(SRA_DIR_TEMP) && echo "$${srr} download complete" & \
		    else \
		        fasterq-dump $${srr} --split-files --skip-technical --threads $${threads_per_process} -O $(SRA_DIR)/fastq_temp -t $(SRA_DIR_TEMP) && echo "$${srr} download complete" & \
		    fi; \
		done < $(SRA_DIR)/mapping/batch_$${batch_num}_srrs.txt; \
		echo "Starting download monitoring..."; \
		start_time=$$(date +%s); \
		while jobs %% > /dev/null 2>&1; do \
		    current=$$(date +%s); \
		    elapsed=$$(( current - start_time )); \
		    running=$$(jobs -p | wc -l); \
		    echo "[$$elapsed sec] Still waiting for $$running fasterq-dump processes to complete..."; \
		    sleep 30; \
		done; \
		echo "All downloads complete."; \
		echo "Concatenating files and quantifying for batch $$batch_num..."; \
		# Process each GSM mapping \
		while IFS=' | ' read -r gsm srr_list || [ -n "$$gsm" ]; do \
			echo "Processing GSM: $$gsm"; \
			# Convert space-separated SRRs to array \
			srr_array=($${srr_list}); \
			# Determine if paired-end or single-end based on first SRR \
			is_paired=false; \
			if [ -f "$(SRA_DIR)/fastq_temp/$${srr_array[0]}_1.fastq" ] && [ -f "$(SRA_DIR)/fastq_temp/$${srr_array[0]}_2.fastq" ]; then \
				is_paired=true; \
				# Initialize concatenated files for paired-end \
				rm -f $(SRA_DIR)/$${gsm}_1.fastq $(SRA_DIR)/$${gsm}_2.fastq; \
				for srr in $${srr_array[@]}; do \
					if [ -f "$(SRA_DIR)/fastq_temp/$${srr}_1.fastq" ] && [ -f "$(SRA_DIR)/fastq_temp/$${srr}_2.fastq" ]; then \
						cat $(SRA_DIR)/fastq_temp/$${srr}_1.fastq >> $(SRA_DIR)/$${gsm}_1.fastq; \
						cat $(SRA_DIR)/fastq_temp/$${srr}_2.fastq >> $(SRA_DIR)/$${gsm}_2.fastq; \
					elif [ -f "$(SRA_DIR)/fastq_temp/$$srr.fastq" ]; then \
						echo "Warning: SRR $$srr is single-end but expected paired-end"; \
					fi; \
				done; \
			else \
				# Initialize concatenated file for single-end \
				rm -f $(SRA_DIR)/$$gsm.fastq; \
				for srr in $${srr_array[@]}; do \
					if [ -f "$(SRA_DIR)/fastq_temp/$$srr.fastq" ]; then \
						cat $(SRA_DIR)/fastq_temp/$$srr.fastq >> $(SRA_DIR)/$$gsm.fastq; \
					fi; \
				done; \
			fi; \
			# Run Salmon quantification on concatenated files \
			if $$is_paired; then \
				echo "Quantifying paired-end reads for $$gsm"; \
				salmon quant -p $(THREADS) -i $(SALMON_INDEX) \
					--geneMap $(GTF) --validateMappings --gcBias -l A \
					-1 $(SRA_DIR)/$${gsm}_1.fastq -2 $(SRA_DIR)/$${gsm}_2.fastq \
					-o $(COUNTS_DIR)/$$gsm; \
			else \
				echo "Quantifying single-end reads for $$gsm"; \
				salmon quant -p $(THREADS) -i $(SALMON_INDEX) \
					--geneMap $(GTF) --validateMappings --gcBias -l A \
					-r $(SRA_DIR)/$$gsm.fastq \
					-o $(COUNTS_DIR)/$$gsm; \
			fi; \
		done < $(SRA_DIR)/batch_$$batch_num.txt; \
		# Clean up batch files \
		echo "Cleaning up batch $$batch_num files..."; \
		rm -f $(SRA_DIR)/fastq_temp/*.fastq $(SRA_DIR)/batch_$${batch_num}.txt $(SRA_DIR)/mapping/batch_$${batch_num}_srrs.txt $(SRA_DIR)/*.fastq; \
	done
	@echo "Aggregating gene counts..."
	@# Extract all GSM accessions for the count table header
	@cut -d '|' -f 1 $(SRA_DIR)/accession_list.txt | tr -d ' ' > $(SRA_DIR)/gsm_list.txt
	@# Create genes.txt from first sample
	@first_sample=$$(head -n 1 $(SRA_DIR)/gsm_list.txt); \
	tail -n +2 $(COUNTS_DIR)/$$first_sample/quant.genes.sf | cut -f 1 > $(COUNTS_DIR)/genes.txt
	@# Create count files for each sample
	@while read -r gsm; do \
		if [ -d "$(COUNTS_DIR)/$$gsm" ]; then \
			tail -n +2 $(COUNTS_DIR)/$$gsm/quant.genes.sf | cut -f 4 > $(COUNTS_DIR)/$$gsm.count; \
		fi; \
	done < $(SRA_DIR)/gsm_list.txt
	@paste $(COUNTS_DIR)/genes.txt $(COUNTS_DIR)/*.count > $@
	@sed -i "1i gene\t$$(cat $(SRA_DIR)/gsm_list.txt | tr '\n' '\t')" $@
	@# Clean up scratch project directory
	@echo "Cleaning up scratch directory..."
	@rm -rf $(PROJECT_DIR)
	@echo "Quantification complete. Results available in $(FINISHED_DIR)/all_counts_$(PROJECT).txt"

# Clean up
clean_salmon:
	rm -rf $(SALMON_DIR)
	# Also clean any leftover scratch directories if possible
	rm -rf $(SCRATCH_DIR)/*

# Help target
help:
	@echo ""
	@echo "RNA-Seq Analysis Pipeline Makefile"
	@echo "Usage:"
	@echo "  make setup_salmon THREADS=<num_threads>		- Set up directories and download reference files"
	@echo "  make quantify_salmon ENDTYPE=<single|paired> THREADS=<num_threads> BATCH_SIZE=<num> PROJECT=<your_project>		- Run Salmon quantification"
	@echo "  make clean_salmon		- Remove all generated files"
	@echo "  make help		- Show this help message"
	@echo ""
	@echo "Variables:"
	@echo "  THREADS			- Number of threads to use (default: 4)"
	@echo "  ENDTYPE			- Type of sequencing reads: 'single' or 'paired' (default: paired)"
	@echo "  BATCH_SIZE			- Number of accessions to process simultaneously (default: 6)"
	@echo "  PROJECT			- Name of the project (default: current date)"
	@echo ""
	@echo "Scratch space at $(SCRATCH_DIR) is used for temporary files"
	@echo ""
