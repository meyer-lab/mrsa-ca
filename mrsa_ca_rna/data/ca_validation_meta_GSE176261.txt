!Sample_title	"25738D RNA-seq [validation cohort]"	"F521DE RNA-seq [validation cohort]"	"F85ABC RNA-seq [validation cohort]"	"A26038 RNA-seq [validation cohort]"	"DC1F52 RNA-seq [validation cohort]"	"8D9587 RNA-seq [validation cohort]"	"708F64 RNA-seq [validation cohort]"	"6C6350 RNA-seq [validation cohort]"	"570AAC RNA-seq [validation cohort]"	"769B19 RNA-seq [validation cohort]"	"B2BB4D RNA-seq [validation cohort]"	"76D6DD RNA-seq [validation cohort]"	"C36000 RNA-seq [validation cohort]"	"4249B5 RNA-seq [validation cohort]"	"A1895C RNA-seq [validation cohort]"	"1AD7A3 RNA-seq [validation cohort]"	"746341 RNA-seq [validation cohort]"	"33560A RNA-seq [validation cohort]"	"B9F3C0 RNA-seq [validation cohort]"	"CF7568 RNA-seq [validation cohort]"	"2F5B42 RNA-seq [validation cohort]"	"7F6F79 RNA-seq [validation cohort]"	"752526 RNA-seq [validation cohort]"	"2387D5 RNA-seq [validation cohort]"	"8CBB63 RNA-seq [validation cohort]"	"3DD564 RNA-seq [validation cohort]"	"3B108A RNA-seq [validation cohort]"	"711FD1 RNA-seq [validation cohort]"	"58A255 RNA-seq [validation cohort]"	"FD1327 RNA-seq [validation cohort]"	"A3DA15 RNA-seq [validation cohort]"	"899DCB RNA-seq [validation cohort]"	"AF5C77 RNA-seq [validation cohort]"	"942D99 RNA-seq [validation cohort]"	"18CFC9 RNA-seq [validation cohort]"	"282732 RNA-seq [validation cohort]"	"CC1427 RNA-seq [validation cohort]"	"C3488C RNA-seq [validation cohort]"	"4332CB RNA-seq [validation cohort]"	"65FD47 RNA-seq [validation cohort]"	"04BF38 RNA-seq [validation cohort]"	"265DD6 RNA-seq [validation cohort]"	"92F246 RNA-seq [validation cohort]"	"D2BB41 RNA-seq [validation cohort]"	"669F2A RNA-seq [validation cohort]"	"1D0D38 RNA-seq [validation cohort]"	"9F8BFC RNA-seq [validation cohort]"	"25D647 RNA-seq [validation cohort]"	"CAC382 RNA-seq [validation cohort]"	"A5813D RNA-seq [validation cohort]"	"60AF75 RNA-seq [validation cohort]"	"D2192B RNA-seq [validation cohort]"	"2AC583 RNA-seq [validation cohort]"	"231970 RNA-seq [validation cohort]"	"A5DC94 RNA-seq [validation cohort]"	"450001 RNA-seq [validation cohort]"	"611755 RNA-seq [validation cohort]"	"BA2178 RNA-seq [validation cohort]"	"87C4A8 RNA-seq [validation cohort]"	"4C688B RNA-seq [validation cohort]"	"B0BD5D RNA-seq [validation cohort]"	"451FB2 RNA-seq [validation cohort]"	"FD4CD2 RNA-seq [validation cohort]"	"4619B8 RNA-seq [validation cohort]"	"F2FD07 RNA-seq [validation cohort]"	"D85F17 RNA-seq [validation cohort]"	"957C6C RNA-seq [validation cohort]"	"F424AF RNA-seq [validation cohort]"	"DFD210 RNA-seq [validation cohort]"	"DC746D RNA-seq [validation cohort]"	"3CDA0F RNA-seq [validation cohort]"	"19C0BF RNA-seq [validation cohort]"	"C2BAFF RNA-seq [validation cohort]"	"C4D725 RNA-seq [validation cohort]"	"017D12 RNA-seq [validation cohort]"	"DA017C RNA-seq [validation cohort]"	"FD6773 RNA-seq [validation cohort]"	"95C8D0 RNA-seq [validation cohort]"	"47571C RNA-seq [validation cohort]"	"DD4D91 RNA-seq [validation cohort]"	"13BC57 RNA-seq [validation cohort]"	"6D3106 RNA-seq [validation cohort]"	"6941A2 RNA-seq [validation cohort]"	"BB3963 RNA-seq [validation cohort]"	"932A93 RNA-seq [validation cohort]"	"768500 RNA-seq [validation cohort]"	"2C5AB3 RNA-seq [validation cohort]"	"DDF5C0 RNA-seq [validation cohort]"	"6832F1 RNA-seq [validation cohort]"	"CC376C RNA-seq [validation cohort]"	"195214 RNA-seq [validation cohort]"	"B84332 RNA-seq [validation cohort]"	"A941DB RNA-seq [validation cohort]"	"C2D21C RNA-seq [validation cohort]"	"FF367A RNA-seq [validation cohort]"	"729A90 RNA-seq [validation cohort]"
!Sample_geo_accession	"GSM5360986"	"GSM5360987"	"GSM5360988"	"GSM5360989"	"GSM5360990"	"GSM5360991"	"GSM5360992"	"GSM5360993"	"GSM5360994"	"GSM5360995"	"GSM5360996"	"GSM5360997"	"GSM5360998"	"GSM5360999"	"GSM5361000"	"GSM5361001"	"GSM5361002"	"GSM5361003"	"GSM5361004"	"GSM5361005"	"GSM5361006"	"GSM5361007"	"GSM5361008"	"GSM5361009"	"GSM5361010"	"GSM5361011"	"GSM5361012"	"GSM5361013"	"GSM5361014"	"GSM5361015"	"GSM5361016"	"GSM5361017"	"GSM5361018"	"GSM5361019"	"GSM5361020"	"GSM5361021"	"GSM5361022"	"GSM5361023"	"GSM5361024"	"GSM5361025"	"GSM5361026"	"GSM5361027"	"GSM5361028"	"GSM5361029"	"GSM5361030"	"GSM5361031"	"GSM5361032"	"GSM5361033"	"GSM5361034"	"GSM5361035"	"GSM5361036"	"GSM5361037"	"GSM5361038"	"GSM5361039"	"GSM5361040"	"GSM5361041"	"GSM5361042"	"GSM5361043"	"GSM5361044"	"GSM5361045"	"GSM5361046"	"GSM5361047"	"GSM5361048"	"GSM5361049"	"GSM5361050"	"GSM5361051"	"GSM5361052"	"GSM5361053"	"GSM5361054"	"GSM5361055"	"GSM5361056"	"GSM5361057"	"GSM5361058"	"GSM5361059"	"GSM5361060"	"GSM5361061"	"GSM5361062"	"GSM5361063"	"GSM5361064"	"GSM5361065"	"GSM5361066"	"GSM5361067"	"GSM5361068"	"GSM5361069"	"GSM5361070"	"GSM5361071"	"GSM5361072"	"GSM5361073"	"GSM5361074"	"GSM5361075"	"GSM5361076"	"GSM5361077"	"GSM5361078"	"GSM5361079"	"GSM5361080"	"GSM5361081"
!Sample_status	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"	"Public on Jun 08 2021"
!Sample_submission_date	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"	"Jun 07 2021"
!Sample_last_update_date	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"	"Jun 08 2021"
!Sample_type	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"	"SRA"
!Sample_channel_count	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"	"1"
!Sample_source_name_ch1	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"	"mRNA extracted from whole blood"
!Sample_organism_ch1	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"	"Homo sapiens"
!Sample_characteristics_ch1	"subject_id: ABB96C"	"subject_id: 318BBF"	"subject_id: 70B7A0"	"subject_id: 962A9B"	"subject_id: DF2A62"	"subject_id: D8DA9A"	"subject_id: 9F9505"	"subject_id: 26736B"	"subject_id: FC9B5A"	"subject_id: FA8349"	"subject_id: 5846CD"	"subject_id: 1B64C3"	"subject_id: 2337AB"	"subject_id: 4B4240"	"subject_id: C32BF6"	"subject_id: 0595C4"	"subject_id: 3D21D2"	"subject_id: 850182"	"subject_id: 41C930"	"subject_id: 016D66"	"subject_id: 17C771"	"subject_id: D94B44"	"subject_id: D0D338"	"subject_id: D0D338"	"subject_id: 054298"	"subject_id: 921D0C"	"subject_id: F753F5"	"subject_id: 678DB0"	"subject_id: 93F3D9"	"subject_id: C8655F"	"subject_id: 9DB94C"	"subject_id: 5CF67F"	"subject_id: 721669"	"subject_id: C4BFC2"	"subject_id: 84459D"	"subject_id: 5D75DF"	"subject_id: 0FFA12"	"subject_id: 80F259"	"subject_id: 68B780"	"subject_id: B4CF13"	"subject_id: 15C6F2"	"subject_id: 7B8F1F"	"subject_id: DD0B64"	"subject_id: AC7924"	"subject_id: 726620"	"subject_id: 78B51F"	"subject_id: 754550"	"subject_id: 7CA97D"	"subject_id: A1142C"	"subject_id: AB40DF"	"subject_id: 196664"	"subject_id: F4160B"	"subject_id: F4160B"	"subject_id: F4160B"	"subject_id: F4160B"	"subject_id: F4160B"	"subject_id: F4160B"	"subject_id: F4160B"	"subject_id: F4160B"	"subject_id: F4160B"	"subject_id: F4160B"	"subject_id: F4160B"	"subject_id: 76ACBD"	"subject_id: B6DA9A"	"subject_id: 6B77AA"	"subject_id: C03D0D"	"subject_id: C03D0D"	"subject_id: C03D0D"	"subject_id: C03D0D"	"subject_id: C03D0D"	"subject_id: C03D0D"	"subject_id: C03D0D"	"subject_id: C03D0D"	"subject_id: 406FBD"	"subject_id: 572D32"	"subject_id: 1317C1"	"subject_id: 1317C1"	"subject_id: 1317C1"	"subject_id: 1317C1"	"subject_id: 1317C1"	"subject_id: 1317C1"	"subject_id: 1317C1"	"subject_id: 1317C1"	"subject_id: 1317C1"	"subject_id: 1317C1"	"subject_id: 1317C1"	"subject_id: 1317C1"	"subject_id: 1317C1"	"subject_id: 1317C1"	"subject_id: 908480"	"subject_id: 55104C"	"subject_id: 56861F"	"subject_id: F169AF"	"subject_id: C24A24"	"subject_id: 7F2385"	"subject_id: B10F0B"
!Sample_characteristics_ch1	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Fail"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Fail"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Fail"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"	"passed sample qc: Pass"
!Sample_characteristics_ch1	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: No"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: No"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: No"	"validation_analysis_sample: Yes"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: Yes"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: No"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"	"validation_analysis_sample: No"	"validation_analysis_sample: Yes"	"validation_analysis_sample: Yes"
!Sample_characteristics_ch1	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: 0"	"daysreltofirsttimepoint: 2"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: 0"	"daysreltofirsttimepoint: 36"	"daysreltofirsttimepoint: 43"	"daysreltofirsttimepoint: 50"	"daysreltofirsttimepoint: 57"	"daysreltofirsttimepoint: 64"	"daysreltofirsttimepoint: 6"	"daysreltofirsttimepoint: 8"	"daysreltofirsttimepoint: 15"	"daysreltofirsttimepoint: 22"	"daysreltofirsttimepoint: 27"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: 15"	"daysreltofirsttimepoint: 18"	"daysreltofirsttimepoint: 22"	"daysreltofirsttimepoint: 24"	"daysreltofirsttimepoint: 2"	"daysreltofirsttimepoint: 0"	"daysreltofirsttimepoint: 4"	"daysreltofirsttimepoint: 9"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: 41"	"daysreltofirsttimepoint: 45"	"daysreltofirsttimepoint: 49"	"daysreltofirsttimepoint: 62"	"daysreltofirsttimepoint: 64"	"daysreltofirsttimepoint: 71"	"daysreltofirsttimepoint: 6"	"daysreltofirsttimepoint: 0"	"daysreltofirsttimepoint: 8"	"daysreltofirsttimepoint: 13"	"daysreltofirsttimepoint: 15"	"daysreltofirsttimepoint: 21"	"daysreltofirsttimepoint: 26"	"daysreltofirsttimepoint: 34"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"	"daysreltofirsttimepoint: NA"
!Sample_characteristics_ch1	"phenotype: Viral"	"phenotype: Viral"	"phenotype: Viral"	"phenotype: Bacterial"	"phenotype: Bacterial"	"phenotype: Bacterial"	"phenotype: Viral"	"phenotype: Viral"	"phenotype: Viral"	"phenotype: Viral"	"phenotype: Viral"	"phenotype: Viral"	"phenotype: Viral"	"phenotype: Bacterial"	"phenotype: Bacterial"	"phenotype: Bacterial"	"phenotype: Bacterial"	"phenotype: Bacterial"	"phenotype: Bacterial"	"phenotype: Bacterial"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Healthy"	"phenotype: Healthy"	"phenotype: Healthy"	"phenotype: Healthy"	"phenotype: Healthy"	"phenotype: Healthy"	"phenotype: Healthy"	"phenotype: Healthy"	"phenotype: Healthy"	"phenotype: Healthy"	"phenotype: Healthy"	"phenotype: Healthy"	"phenotype: Healthy"	"phenotype: Healthy"	"phenotype: Healthy"	"phenotype: Viral"	"phenotype: Bacterial"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Mixed Candida/bacterial"	"phenotype: Mixed Candida/bacterial"	"phenotype: Mixed Candida/bacterial"	"phenotype: Mixed Candida/bacterial"	"phenotype: Mixed Candida/bacterial"	"phenotype: Mixed Candida/bacterial"	"phenotype: Mixed Candida/bacterial"	"phenotype: Mixed Candida/bacterial"	"phenotype: Mixed Candida/bacterial"	"phenotype: Mixed Candida/bacterial"	"phenotype: Mixed Candida/bacterial"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"	"phenotype: Candidemia"
!Sample_characteristics_ch1	"gender: Female"	"gender: Female"	"gender: Female"	"gender: Male"	"gender: Male"	"gender: Female"	"gender: Male"	"gender: Male"	"gender: Female"	"gender: Female"	"gender: Female"	"gender: Female"	"gender: Male"	"gender: Female"	"gender: Female"	"gender: Male"	"gender: Male"	"gender: Female"	"gender: Female"	"gender: Female"	"gender: Female"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Female"	"gender: Male"	"gender: Male"	"gender: Female"	"gender: Female"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Female"	"gender: Male"	"gender: Female"	"gender: Male"	"gender: Female"	"gender: Female"	"gender: Female"	"gender: Female"	"gender: Female"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Female"	"gender: Female"	"gender: Female"	"gender: Female"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Female"	"gender: Male"	"gender: Male"	"gender: Female"	"gender: Female"	"gender: Female"	"gender: Female"	"gender: Female"	"gender: Female"	"gender: Female"	"gender: Female"	"gender: Female"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Male"	"gender: Female"	"gender: Female"	"gender: Female"	"gender: Female"	"gender: Male"	"gender: Female"	"gender: Male"
!Sample_characteristics_ch1	"age: 50"	"age: 47"	"age: 51"	"age: 20"	"age: 82"	"age: 68"	"age: 19"	"age: 14"	"age: 21"	"age: 25"	"age: 23"	"age: 49"	"age: 55"	"age: 79"	"age: 38"	"age: 55"	"age: 53"	"age: 74"	"age: 52"	"age: 36"	"age: 20"	"age: 61"	"age: 66"	"age: 66"	"age: 21"	"age: 22"	"age: 56"	"age: 36"	"age: 27"	"age: 49"	"age: 22"	"age: 31"	"age: 44"	"age: 39"	"age: 19"	"age: 40"	"age: 21"	"age: 52"	"age: 23"	"age: 14"	"age: 39"	"age: 28"	"age: 64"	"age: 52"	"age: 70"	"age: 43"	"age: 48"	"age: 46"	"age: 51"	"age: 62"	"age: 63"	"age: 31"	"age: 31"	"age: 31"	"age: 31"	"age: 31"	"age: 31"	"age: 31"	"age: 31"	"age: 31"	"age: 31"	"age: 31"	"age: 71"	"age: 65"	"age: 46"	"age: 34"	"age: 34"	"age: 34"	"age: 34"	"age: 34"	"age: 34"	"age: 34"	"age: 34"	"age: 57"	"age: 36"	"age: 75"	"age: 75"	"age: 75"	"age: 75"	"age: 75"	"age: 75"	"age: 75"	"age: 75"	"age: 75"	"age: 75"	"age: 75"	"age: 75"	"age: 75"	"age: 75"	"age: 45"	"age: 64"	"age: 27"	"age: 64"	"age: 62"	"age: 22"	"age: 79"
!Sample_characteristics_ch1	"race_amind_alaskan: 0"	"race_amind_alaskan: 0"	"race_amind_alaskan: 0"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: 0"	"race_amind_alaskan: 0"	"race_amind_alaskan: 0"	"race_amind_alaskan: 0"	"race_amind_alaskan: 0"	"race_amind_alaskan: NA"	"race_amind_alaskan: 0"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: 0"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: 1"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"	"race_amind_alaskan: NA"
!Sample_characteristics_ch1	"race_asian: 0"	"race_asian: 0"	"race_asian: 0"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: 0"	"race_asian: 0"	"race_asian: 0"	"race_asian: 0"	"race_asian: 0"	"race_asian: NA"	"race_asian: 0"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: 1"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: 0"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"	"race_asian: NA"
!Sample_characteristics_ch1	"race_white: 0"	"race_white: 1"	"race_white: 0"	"race_white: 1"	"race_white: 1"	"race_white: NA"	"race_white: 0"	"race_white: 1"	"race_white: 1"	"race_white: 0"	"race_white: 0"	"race_white: NA"	"race_white: 0"	"race_white: NA"	"race_white: NA"	"race_white: NA"	"race_white: NA"	"race_white: 1"	"race_white: NA"	"race_white: NA"	"race_white: 1"	"race_white: NA"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: NA"	"race_white: 1"	"race_white: NA"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: NA"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 0"	"race_white: NA"	"race_white: 1"	"race_white: NA"	"race_white: 1"	"race_white: 1"	"race_white: NA"	"race_white: 1"	"race_white: NA"	"race_white: NA"	"race_white: 1"	"race_white: NA"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: NA"	"race_white: NA"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"	"race_white: 1"
!Sample_characteristics_ch1	"race_black: 1"	"race_black: 0"	"race_black: 1"	"race_black: NA"	"race_black: NA"	"race_black: 1"	"race_black: 1"	"race_black: 0"	"race_black: 0"	"race_black: 1"	"race_black: 1"	"race_black: 1"	"race_black: 1"	"race_black: 1"	"race_black: 1"	"race_black: 1"	"race_black: 1"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: 1"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: 1"	"race_black: NA"	"race_black: 1"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: 1"	"race_black: 1"	"race_black: NA"	"race_black: 1"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: 1"	"race_black: 1"	"race_black: NA"	"race_black: 1"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: 1"	"race_black: 1"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"	"race_black: NA"
!Sample_characteristics_ch1	"race_unknown: 0"	"race_unknown: 0"	"race_unknown: 0"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: 0"	"race_unknown: 0"	"race_unknown: 0"	"race_unknown: 0"	"race_unknown: 0"	"race_unknown: NA"	"race_unknown: 0"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: 1"	"race_unknown: 1"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: 0"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"	"race_unknown: NA"
!Sample_characteristics_ch1	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"	"race_other: NA"
!Sample_molecule_ch1	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"	"polyA RNA"
!Sample_extract_protocol_ch1	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"	"Total RNA was extracted from human blood preserved and stored in PAXgene Blood RNA Tubes using the Qiagen PAXgene Blood miRNA Kit according to the manufacturer’s protoco"
!Sample_extract_protocol_ch1	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"	"RNA sequencing libraries were generated using NuGEN Universal mRNA-seq kit with AnyDeplete Globin (NuGEN Technologies, Redwood City, CA) and sequenced on the Illumina NovaSeq 6000 instrument with S2 flow cell and 50bp paired-end reads (performed through the Duke Sequencing and Genomic Technologies Core)"
!Sample_taxid_ch1	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"	"9606"
!Sample_description	"105906_S88"	"105908_S87"	"105929_S89"	"106178_S83"	"106551_S91"	"278076_S92"	"82610_RNA_S75"	"82625_RNA_S76"	"82633_RNA_S80"	"82645_RNA_S77"	"82787_RNA_S78"	"82799_RNA_S81"	"82839_RNA_S82"	"94500_S96"	"95967_S84"	"95969_S85"	"95981_S86"	"95986_S95"	"95997_S94"	"96002_S93"	"A4-1_S73"	"A5-1-6_28_13_S74"	"A8-121-9_24_13_S32"	"A8-143-9_26_13_S33"	"CR001-2_S34"	"CR002-2_S35"	"CR003-2_S36"	"CR004-2_S37"	"CR005-2_S38"	"CR006-2_S39"	"CR007-2_S40"	"CR008-2_S41"	"CR009-2_S42"	"CR011-2_S43"	"CR012-2_S44"	"CR013-2_S45"	"CR014-2_S46"	"CR015-2_S47"	"CR016-2_S48"	"DU09-03S0000001_S90"	"HF214_RNA_S79"	"RNA-300-36-10_31_11_S51"	"RNA-301-1-10_27_11_S50"	"RNA-303-1-11_1_11_S52"	"RNA-304-2-11_4_11_S53"	"RNA-305-1-11_6_11_S54"	"RNA-306-_1-1_9_12_S55"	"RNA-311-1-1_24_12_S56"	"RNA-312-_1-1_31_12_S57"	"RNA-333-_1-1_21_13_S58"	"RNA-334-1-4_12_13_S59"	"RNA-335-_2-5_8_13_S1"	"RNA-335-121-6_13_13_S7"	"RNA-335-129-6_20_13_S8"	"RNA-335-138-6_27_13_S9"	"RNA-335-147-7_4_13_S10"	"RNA-335-157-7_11_13_S11"	"RNA-335-23-5_14_13_S2"	"RNA-335-42-5_16_13_S3"	"RNA-335-58-5_23_13_S4"	"RNA-335-78-5_30_13_S5"	"RNA-335-97-6_4_13_S6"	"RNA-336-1-5_14_13_S60"	"RNA-338-1-7_9_13_S61"	"RNA-339-21-7_18_13_S62"	"RNA-342-105-9_10_13_S29"	"RNA-342-122-9_13_13_S30"	"RNA-342-141-9_17_13_S31"	"RNA-342-157-9_19_13_S49"	"RNA-342-23-8_28_13_S26"	"RNA-342-3-8_26_13_S63"	"RNA-342-43-8_30_13_S27"	"RNA-342-64-9_4_13_S28"	"RNA-343-2-10_2_13_S64"	"RNA-346-2-11_2_13_S65"	"RNA-354-101-2_26_14_S20"	"RNA-354-106-3_2_14_S21"	"RNA-354-112-3_6_14_S22"	"RNA-354-125-3_19_14_S23"	"RNA-354-132-3_21_14_S24"	"RNA-354-139-3_28_14_S25"	"RNA-354-15-1_22_14_S13"	"RNA-354-2-1_16_14_S12"	"RNA-354-31-1_24_14_S14"	"RNA-354-47-1_29_14_S15"	"RNA-354-61-1_31_14_S16"	"RNA-354-75-2_6_14_S17"	"RNA-354-91-2_11_14_S18"	"RNA-354-97-2_19_14_S19"	"RNA-357-1-3_3_14_S66"	"RNA-358-1-3_5_14_S67"	"RNA-359-2-4_30_14_S68"	"RNA-360-1-6_18_14_S69"	"RNA-361-2-7_1_14_S70"	"RNA-362-1-7_30_14_S71"	"RNA-363-1-9_5_14_S72"
!Sample_description	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"	"processed data file:"
!Sample_description	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	""	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	""	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	""	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"	"QCed_counts_batch2_allsamples.txt"
!Sample_description	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	""	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	""	""	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	""	""	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	""	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	""	"QCed_counts_batch2_validationsamples.txt"	""	""	""	""	""	""	""	""	""	""	""	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	""	""	""	""	""	""	""	""	""	"QCed_counts_batch2_validationsamples.txt"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"	""	"QCed_counts_batch2_validationsamples.txt"	"QCed_counts_batch2_validationsamples.txt"
!Sample_description	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	""	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	""	""	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	""	""	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	""	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	""	"Log2_normalized_expression_batch2_validationsamples.txt"	""	""	""	""	""	""	""	""	""	""	""	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	""	""	""	""	""	""	""	""	""	"Log2_normalized_expression_batch2_validationsamples.txt"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"	""	"Log2_normalized_expression_batch2_validationsamples.txt"	"Log2_normalized_expression_batch2_validationsamples.txt"
!Sample_description	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	""	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	""	""	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	""	""	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	""	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	""	"Voom_weights_batch2_validationsamples.txt"	""	""	""	""	""	""	""	""	""	""	""	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	""	""	""	""	""	""	""	""	""	"Voom_weights_batch2_validationsamples.txt"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"	""	"Voom_weights_batch2_validationsamples.txt"	"Voom_weights_batch2_validationsamples.txt"
!Sample_data_processing	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"	"base calling"
!Sample_data_processing	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"	"sequence mapping: sequences were mapped and gene expression quantified using using STAR with parameters: quantMode: ‘GeneCounts’; outSAMtype: ‘None’; outSAMmode: ‘None’; readFilesCommand: ‘zcat’ and  ENSEMBL gene reference Homo sapiens GRCh38 DNA, release 96, downloaded from: ftp://ftp.ensembl.org/pub/release-96/fasta/homo_sapiens/dna/ . All other parameters were left at their default values for STAR version 2.7.1a"
!Sample_data_processing	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"	"counts QC: keep genes that passed QC in the discovery dataset; keep samples with libriary size > 12M and average pairwise correlation >= 0.7"
!Sample_data_processing	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"	"counts normalization (all samples dataset): Trimmed mean of M-values (TMM) normalization; software R, package edgeR"
!Sample_data_processing	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"	"require(limma)  require(edgeR)  # Normalization steps  dge <- DGEList(counts=QCed_counts_batch2_validationsamples.txt , samples = Metadata[which(Metadata$validation_analysis_sample == ""Yes""),])  dge <- calcNormFactors(dge, method = ""TMM"")  design <- model.matrix(~0+phenotype+gender, data = dge$samples)  v <- voom(dge,design,plot=TRUE)  vfit <- lmFit(v,design)  contr.matrix <- makeContrasts(    Candidemia_Bacterial = Candidemia-Bacterial,    Candidemia_Healthy = Candidemia-Healthy,    Candidemia_Viral = Candidemia-Viral,    Candidemia_others = Candidemia-1/3*Bacterial-1/3*Healthy-1/3*Viral,    Bacterial_others = Bacterial-1/3*Candidemia-1/3*Healthy-1/3*Viral,    Viral_others = Viral-1/3*Candidemia-1/3*Healthy-1/3*Bacterial,    levels = colnames(design)  )    vfit <- contrasts.fit(vfit, contrasts = contr.matrix)  efit <- eBayes(vfit)    # input into predictive modelling (lasso/glmnet)   # t(cpm(dge, log = TRUE))"
!Sample_data_processing	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"	"Genome_build: Homo sapiens GRCh38 DNA, release 96"
!Sample_data_processing	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for all samples and genes passing QC"
!Sample_data_processing	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"	"Supplementary_files_format_and_content: tab-delimited plain text file with gene counts for samples used for validation of prior differential expression and model developemnt results"
!Sample_data_processing	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with the numeric matrix of normalized expression values on the log2 scale for sampels used to validated prior results. Obtained from the ""$E"" argument of the limma::voom object. To be used with file ""voom_weights.txt"" when testing in limma::lmFit"
!Sample_data_processing	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"	"Supplementary_files_format_and_content: tab-delimited text file with numeric matrix of inverse variance weights from voom for samples used to validate prior results. Obtained from the ""$weights"" argument of the limma::voom object. To be used with file ""Voom_normalized_expression.txt"" when using limma::lmFit"
!Sample_platform_id	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"	"GPL24676"
!Sample_contact_name	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"	"Julie,,Steinbrink"
!Sample_contact_email	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"	"Julie.steinbrink@duke.edu"
!Sample_contact_department	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"	"Center for Applied Genomics and Precision Medicine"
!Sample_contact_institute	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"	"Duke University"
!Sample_contact_address	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"	"315 Trent Drive"
!Sample_contact_city	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"	"Durham"
!Sample_contact_state	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"	"NC"
!Sample_contact_zip/postal_code	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"	"27710"
!Sample_contact_country	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"	"USA"
!Sample_data_row_count	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"	"0"
!Sample_instrument_model	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"	"Illumina NovaSeq 6000"
!Sample_library_selection	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"	"cDNA"
!Sample_library_source	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"	"transcriptomic"
!Sample_library_strategy	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"	"RNA-Seq"
!Sample_relation	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592304"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592303"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591966"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591965"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591964"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591963"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591962"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591961"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591960"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591959"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591958"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591957"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591956"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591980"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591979"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591978"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591977"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591976"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591975"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591974"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591973"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591972"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591971"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591970"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592268"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592267"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592266"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592265"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592264"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591914"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591913"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591940"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592263"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592262"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592261"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591917"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591916"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591915"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591939"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591908"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591907"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591906"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591905"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591904"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591903"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591902"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591901"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591900"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591899"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591898"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591897"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591896"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591926"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591925"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591924"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591923"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591922"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591921"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591920"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591919"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591918"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592260"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592259"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592258"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592257"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592256"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592255"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592281"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592280"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592279"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592278"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592277"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592276"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592275"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592274"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592273"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19592272"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591875"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591874"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591873"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591872"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591895"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591894"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591893"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591892"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591891"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591888"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591887"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591886"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591885"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591912"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591911"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591890"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591889"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591910"	"BioSample: https://www.ncbi.nlm.nih.gov/biosample/SAMN19591909"
!Sample_relation	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081227"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081228"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081229"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081254"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081255"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081256"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081257"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081258"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081259"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081260"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081261"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081262"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081263"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081264"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081265"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081266"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081267"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081268"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081269"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081270"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081271"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081272"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081273"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081274"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081275"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081276"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081277"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081278"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081279"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081280"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081281"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081282"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081283"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081284"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081285"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081286"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081287"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081288"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081289"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081290"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081291"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081292"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081293"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081294"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081295"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081296"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081297"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081298"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081299"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081300"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081301"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081230"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081231"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081232"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081233"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081234"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081235"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081236"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081237"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081238"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081239"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081240"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081241"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081242"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081243"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081244"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081245"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081246"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081247"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081248"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081249"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081250"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081251"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081252"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081253"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081302"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081303"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081304"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081305"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081306"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081307"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081308"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081309"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081310"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081311"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081312"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081313"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081314"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081315"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081316"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081317"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081318"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081319"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081320"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081321"	"SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX11081322"
!Sample_supplementary_file_1	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"	"NONE"
!series_matrix_table_begin
"ID_REF"	"GSM5360986"	"GSM5360987"	"GSM5360988"	"GSM5360989"	"GSM5360990"	"GSM5360991"	"GSM5360992"	"GSM5360993"	"GSM5360994"	"GSM5360995"	"GSM5360996"	"GSM5360997"	"GSM5360998"	"GSM5360999"	"GSM5361000"	"GSM5361001"	"GSM5361002"	"GSM5361003"	"GSM5361004"	"GSM5361005"	"GSM5361006"	"GSM5361007"	"GSM5361008"	"GSM5361009"	"GSM5361010"	"GSM5361011"	"GSM5361012"	"GSM5361013"	"GSM5361014"	"GSM5361015"	"GSM5361016"	"GSM5361017"	"GSM5361018"	"GSM5361019"	"GSM5361020"	"GSM5361021"	"GSM5361022"	"GSM5361023"	"GSM5361024"	"GSM5361025"	"GSM5361026"	"GSM5361027"	"GSM5361028"	"GSM5361029"	"GSM5361030"	"GSM5361031"	"GSM5361032"	"GSM5361033"	"GSM5361034"	"GSM5361035"	"GSM5361036"	"GSM5361037"	"GSM5361038"	"GSM5361039"	"GSM5361040"	"GSM5361041"	"GSM5361042"	"GSM5361043"	"GSM5361044"	"GSM5361045"	"GSM5361046"	"GSM5361047"	"GSM5361048"	"GSM5361049"	"GSM5361050"	"GSM5361051"	"GSM5361052"	"GSM5361053"	"GSM5361054"	"GSM5361055"	"GSM5361056"	"GSM5361057"	"GSM5361058"	"GSM5361059"	"GSM5361060"	"GSM5361061"	"GSM5361062"	"GSM5361063"	"GSM5361064"	"GSM5361065"	"GSM5361066"	"GSM5361067"	"GSM5361068"	"GSM5361069"	"GSM5361070"	"GSM5361071"	"GSM5361072"	"GSM5361073"	"GSM5361074"	"GSM5361075"	"GSM5361076"	"GSM5361077"	"GSM5361078"	"GSM5361079"	"GSM5361080"	"GSM5361081"
!series_matrix_table_end
